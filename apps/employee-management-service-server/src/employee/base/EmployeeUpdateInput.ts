/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
  IsInt,
  Min,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { EnumEmployeeGender } from "./EnumEmployeeGender";
import { PromotionUpdateManyWithoutEmployeesInput } from "./PromotionUpdateManyWithoutEmployeesInput";
import { TransferUpdateManyWithoutEmployeesInput } from "./TransferUpdateManyWithoutEmployeesInput";

@InputType()
class EmployeeUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cadre?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfAppointmentInTheGazettedGrade?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfAppointmentToThePresentPost?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfInitialAppointment?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfRetirement?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  department?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fatherSName?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumEmployeeGender,
  })
  @IsEnum(EnumEmployeeGender)
  @IsOptional()
  @Field(() => EnumEmployeeGender, {
    nullable: true,
  })
  gender?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  mobileNumber?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  presentDesignation?: string | null;

  @ApiProperty({
    required: false,
    type: () => PromotionUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PromotionUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PromotionUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  promotions?: PromotionUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalLengthOfService?: number | null;

  @ApiProperty({
    required: false,
    type: () => TransferUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TransferUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TransferUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  transfers?: TransferUpdateManyWithoutEmployeesInput;
}

export { EmployeeUpdateInput as EmployeeUpdateInput };
